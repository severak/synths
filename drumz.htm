<!doctype html>
<html>
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<title>drum machine / Severák's synths</title>
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" href="http://tilde.town/~severak/flogiston-tui.css">
	<meta property="og:title" content="Severák's synths" />
	<meta property="og:image" content="https://www.gravatar.com/avatar/21621c02d6a6ab7b07b4a6982b6ec68e.jpg?s=300" />
	<meta property="og:type" content="website" />
	<meta property="og:description" content="various synths in javascript / html5 / webmidi" />
	<script src="uboot.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/jzz"></script>
	<script src="https://cdn.jsdelivr.net/npm/jzz-synth-tiny@1.0.4/javascript/JZZ.synth.Tiny.min.js"></script>
</head>
<body>
	<div class="flogiston-page">         
	<div class="flogiston-article">
	<h1>8*3 drum machine</h1>
	
	<div class="keyboard" id="keyboard">
	<div class="row qwer">
		<button id="q">Q</button>
		<button id="w">W</button>
		<button id="e">E</button>
		<button id="r">R</button>
		<button id="t">T</button>
		<button id="y">Y</button>
		<button id="u">U</button>
		<button id="i">I</button>
		<select class="instrument" data-ord="0">
			<option value="36">bass</option>
			<option value="40">snare</option>
			<option value="45" selected>low tom</option>
			<option value="64">low conga</option>
			<option value="37">rimshot</option>
			<option value="75">claves</option>
			<option value="70">maraca</option>
			<option value="39">handclap</option>
			<option value="56">cowbell</option>
			<option value="49">cymbal</option>
			<option value="46">open hihat</option>
			<option value="42">closed hihat</option>
		</select>
	</div>
	<div class="row asdf">
		<button id="a">A</button>
		<button id="s">S</button>
		<button id="d">D</button>
		<button id="f">F</button>
		<button id="g">G</button>
		<button id="h">H</button>
		<button id="j">J</button>
		<button id="k">K</button>
		<select class="instrument"  data-ord="1">
			<option value="36">bass</option>
			<option value="40" selected>snare</option>
			<option value="45">low tom</option>
			<option value="64">low conga</option>
			<option value="37">rimshot</option>
			<option value="75">claves</option>
			<option value="70">maraca</option>
			<option value="39">handclap</option>
			<option value="56">cowbell</option>
			<option value="49">cymbal</option>
			<option value="46">open hihat</option>
			<option value="42">closed hihat</option>
		</select>
	</div>
	<div class="row zxcv">
		<button id="z">Z</button>
		<button id="x">X</button>
		<button id="c">C</button>
		<button id="v">V</button>
		<button id="b">B</button>
		<button id="n">N</button>
		<button id="m">M</button>
		<button id="comma">,</button>
		<select class="instrument"  data-ord="2">
			<option value="36" selected>bass</option>
			<option value="40">snare</option>
			<option value="45">low tom</option>
			<option value="64">low conga</option>
			<option value="37">rimshot</option>
			<option value="75">claves</option>
			<option value="70">maraca</option>
			<option value="39">handclap</option>
			<option value="56">cowbell</option>
			<option value="49">cymbal</option>
			<option value="46">open hihat</option>
			<option value="42">closed hihat</option>
		</select>
	</div>
	<div class="row">
		<button id="space">play / pause</button>
	</div>
	<div>
		<label>BPM: <input id="bpm" type="number" min="1" max="600" value="120"></label>
		<label>metronome <input id="metronome" type="checkbox" value="1"></label>
		<label>MIDI Out: <select id=selectMidiOut></select></label>
	</div>
	</div>

	<hr>
	<p>just one of <a href="index.htm">Severák's synths</a></p>
	
	<p>Created with wonderful <a href="https://www.jazz-soft.net/doc/JZZ/">JZZ lib from jazz soft</a>.</p>
	
	
<style>
.keyboard .row { padding-bottom: 0.5em; }
.keyboard button { border: 1px solid lightgrey; color: lightgrey; background-color: darkblue;  border-radius: 1em; width: 2em; height: 2em; }
.keyboard button.on { background-color: green; }
.keyboard #space { width: 20em; }


select, input { border: 1px solid lightgrey; color: lightgrey; background-color: darkblue; }

button:focus { border-style: double; }
</style>

<script>
// fallback synth
JZZ.synth.Tiny.register('JZZ Tiny Synth');
		

whenReady(function(){
	// key on keyboard -> letter
	var keymap = {
		KeyQ: 'q',
		KeyW: 'w',
		KeyE: 'e',
		KeyR: 'r',
		KeyT: 't',
		KeyY: 'y',
		KeyU: 'u',
		KeyI: 'i',
		KeyA: 'a',
		KeyS: 's',
		KeyD: 'd',
		KeyF: 'f',
		KeyG: 'g',
		KeyH: 'h',
		KeyJ: 'j',
		KeyK: 'k',
		KeyZ: 'z',
		KeyX: 'x',
		KeyC: 'c',
		KeyV: 'v',
		KeyB: 'b',
		KeyN: 'n',
		KeyM: 'm',
		Comma: 'comma',
		Space: 'space',
	};
	
	keyord = [
		['q', 'w', 'e', 'r', 't', 'y', 'u', 'i'],
		['a', 's', 'd', 'f', 'g', 'h', 'j', 'k'],
		['z', 'x', 'c', 'v', 'b', 'n', 'm', 'comma'],
	];
	
	instr = [45, 40, 36];

	// what is toggled
	toggled = {};
	
	var _keyElem = {};
	function toggle(k)
	{
		toggled[k] = !toggled[k];
		if (!_keyElem[k]) _keyElem[k] = gebi(k);
		if (toggled[k]) {
			addClass(_keyElem[k] ,'on');
		} else {
			delClass(_keyElem[k] ,'on');
		}
	}
	
	on('keyboard', 'click', 'button',  function(e){
		toggle(e.target.id);
		e.target.blur();
	});
	
	on(document, 'keyup', function(e){
		
		if (keymap[e.code]) {
			var k = keymap[e.code];
			toggle(k);
			return false; // preventDefault
		}
	});
	
	on('instrument', 'change', 'select', function(e){
		instr[e.target.getAttribute('data-ord')] = e.target.value;
	});
	
	
	var metronome = false;
	on('metronome', 'change', function(){
		metronome = gebi('metronome').checked;
	});
	
	// MIDI through
	through = JZZ.Widget();

// from https://stackoverflow.com/a/44337628 :

/**
 * Self-adjusting interval to account for drifting
 * 
 * @param {function} workFunc  Callback containing the work to be done
 *                             for each interval
 * @param {int}      interval  Interval speed (in milliseconds) - This 
 * @param {function} errorFunc (Optional) Callback to run if the drift
 *                             exceeds interval
 */
function AdjustingInterval(workFunc, interval, errorFunc) {
    var that = this;
    var expected, timeout;
    this.interval = interval;

    this.start = function() {
        expected = Date.now() + this.interval;
        timeout = setTimeout(step, this.interval);
    }

    this.stop = function() {
        clearTimeout(timeout);
    }

    function step() {
        var drift = Date.now() - expected;
        if (drift > that.interval) {
            // You could have some default stuff here too...
            if (errorFunc) errorFunc();
        }
        workFunc();
        expected += that.interval;
        timeout = setTimeout(step, Math.max(0, that.interval-drift));
    }
}

var intervalError = function() {
    console.warn('The drift exceeded the interval.');
};

	var step = 0;

	// scope problems - keyord + toggled + instr + through
	function tick() {
		step = (step + 1) % 8;
		if (toggled.space) {
			console.log(toggled[keyord[0][step]])
			if (toggled[keyord[0][step]]) {
				through.noteOn(9, instr[0]);
			}
		
			if (toggled[keyord[1][step]]) {
				through.noteOn(9, instr[1]);
			}
			
			if (toggled[keyord[2][step]]) {
				through.noteOn(9, instr[2]);
			}
			
			if (metronome) {
				through.noteOn(9, 34);
			}
		}
	}

	var ticker = new AdjustingInterval(tick, 1000 / (120/60), intervalError);
	
	ticker.start();
	
	on('bpm', 'change', function(){
		var bpm = gebi('bpm').value;
		ticker.stop();
		ticker.interval = 1000 / (bpm / 60 );
		ticker.start();
	});

	// populate MIDI output select
	JZZ().and(function(){
		
		var i;
		for (i = 0; i < this.info().outputs.length; i++) {
			selectMidiOut[i] = new Option(this.info().outputs[i].name);
		}
		if (!i) {
			selectMidiOut[i] = new Option('Not available');
		}
	});
	
	// changing MIDI output
	var midiOutName = 'Not available';
	var midiOutPort;
	
	function setListbox(lb, s) {
		for (var i = 0; i < lb.options.length; i++) if (lb.options[i].value == s) lb.options[i].selected = 1;
	}
	
	function onMidiOutSuccess() {
		if (midiOutPort) {
			midiOutPort.close();
		}
		midiOutPort = this;
		through.connect(this);
		midiOutName = this.name();
		setListbox(selectMidiOut, midiOutName);
	}

	function onMidiOutFail() {
		if (midiOutPort) through.connect(midiOutPort);
		setListbox(selectMidiOut, midiOutName);
	}
	
	JZZ().openMidiOut().or(onMidiOutFail).and(onMidiOutSuccess);
	
	function changeMidiOut() {
		var name = selectMidiOut.options[selectMidiOut.selectedIndex].value;
		if (name == midiOutName) return;
		if (midiOutPort) through.disconnect(midiOutPort);
		JZZ().openMidiOut(name).or(onMidiOutFail).and(onMidiOutSuccess);
	}
	
	selectMidiOut.addEventListener('change', changeMidiOut);
});

</script>


	</div>
	</div>
</body>
</html>